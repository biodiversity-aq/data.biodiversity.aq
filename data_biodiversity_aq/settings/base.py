"""
Django settings for data_biodiversity_aq project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

from multiprocessing import cpu_count
from celery.schedules import crontab
from django.contrib.messages import constants as messages
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''  # nosec

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django.contrib.postgres',
    'data_manager',
    'rest_framework',
    'django_filters',
    'django.contrib.humanize',
    'drf_yasg',
    'django_celery_results',
    # 'crispy_forms',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # per-site cache - must be in this order!! Update - Common - Fetch
    # 'django.middleware.cache.UpdateCacheMiddleware',  # remove this to avoid cache login info
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',  # remove this to avoid cache login info
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'data_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'data_biodiversity_aq.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'myproject',
        'USER': 'myprojectuser',
        'PASSWORD': 'password',  # nosec
        'HOST': 'localhost',
        'PORT': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = 'home'

LOGOUT_REDIRECT_URL = 'home'

LOGIN_URL = 'login'

# Settings for sending emails with activation links and password reset links
EMAIL_USE_TLS = True

EMAIL_HOST = 'smtp.bebif.be'

EMAIL_PORT = 25

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = False

DATE_INPUT_FORMATS = ('%Y-%m-%d',)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATICFILES_DIRS = []
STATIC_URL = '/static/'

# GBIF username, email and password to download datasets
GBIF_USER = 'gbif_user'

GBIF_USER_PASSWORD = 'gbif_user_password'  # nosec

GBIF_USER_EMAIL = 'gbif_user@email.com'

# Download directory that stores downloaded darwin-core archive
DOWNLOADS_DIR = 'downloads/'

# Fixtures directory for tests
FIXTURE_DIRS = ['fixtures/']

# REST
REST_FRAMEWORK = {
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_VERSION': 'v1.0',
    'ALLOWED_VERSIONS': ('v1.0',),
    'VERSION_PARAM': 'version',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata',
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
        # 'rest_framework.renderers.JSONRenderer',
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer',
    ),
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1/second',
        'user': '1/second'
    }
}

# Grids directory that stores shape files for hexagon grids
SHAPEFILES_DIR = 'shapefiles/'

GRIDS_DIR = os.path.join(SHAPEFILES_DIR, 'grids/')

# Settings for files for downloads
MEDIA_ROOT = 'generated_files/'

# Settings for logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%m/%Y %H:%M:%S"
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'logfile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': r'log/debug.log',
            'maxBytes': 1 * 1024 * 1024,
            'backupCount': 2,
            'formatter': 'standard',
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'celery': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': r'log/celery.log',
            'formatter': 'standard',
            'maxBytes': 1 * 1024 * 1024,
            'backupCount': 5,
        },
        'import_logfile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': r'log/import.log',
            'maxBytes': 1 * 1024 * 1024,
            'backupCount': 2,
            'formatter': 'standard',
        },
        'error_log': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': r'log/errors.log',
            'maxBytes': 1 * 1024 * 1024,
            'backupCount': 1,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins', 'error_log'],
            'level': 'ERROR',
            'propagate': True,
        },
        'data_manager': {
            'handlers': ['logfile', 'console', 'error_log'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'import_datasets': {
            'handlers': ['import_logfile', 'console', 'error_log'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'celery': {
            'handlers': ['celery', 'console', 'error_log'],
            'level': 'DEBUG',
            'propagate': True,
        }
    }
}

# Celery configuration
CELERY_BROKER_URL = 'redis://localhost'

# By default any previously configured handlers on the root logger will be removed.
# If you want to customize your own logging handlers, then you can disable this behavior by setting
# worker_hijack_root_logger = False. We specified that namespace='CELERY' in app.config_from_object in celery.py,
# so all celery config needs to have prefix 'CELERY_'
CELERY_WORKER_HIJACK_ROOT_LOGGER = False

CELERY_BEAT_SCHEDULE = {
    'delete-old-downloads': {
        'task': 'data_manager.tasks.delete_old_downloads',
        'schedule': crontab(minute=0, hour=0),  # execute the `delete_old_downloads` task daily at midnight
        'args': ()
    }
}

# CELERY_RESULT_BACKEND = 'redis://'
CELERY_RESULT_BACKEND = 'django-db'

CELERY_CACHE_BACKEND = 'django-cache'

CELERY_TRACK_STARTED = True

# A list of all the people who get code error notifications (user for mail_admins)
ADMINS = [('admin-name', 'admin-email')]

# to map messages level to bootstrap classes
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# In days
DOWNLOAD_FILE_STORAGE_PERIOD = 7

# caching
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'data_biodiversity_aq_cache',
        'TIMEOUT': None,
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    }
}

CPU_COUNT = cpu_count()

# url prefix
URL_PREFIX = ''

# for harvest_datasets.py
HARVEST_QUERY = [
    {'hostingOrg': 'fb10a11f-4417-41c8-be6a-13a5c8535122'},
    # Country is not yet implemented for use with dataset search
    # {'country': 'AQ'},
    # {'country': 'BV'},
    # {'country': 'GS'},
    # {'country': 'HM'},
    # {'country': 'TF'},
    {'q': 'antarctic'},
    # all other full text search below return too many results with "OR" if search term >1 word.
    # {'q': 'southern ocean'},
    # {'q': 'Marion Island'},
    # {'q': 'Prince Edward Island'},
    # {'q': 'Balleny Islands'},
    # {'q': 'Scott Island'},
    # {'q': 'Peter I Island'},
    # {'q': 'Peter I Oy'},
    # {'q': 'Macquarie Island'},
    # {'q': 'Northeast Antarctic Peninsula'},
    # {'q': 'South Orkney Islands'},
    # {'q': 'Northwest Antarctic Peninsula'},
    # {'q': 'Central south Antarctic Peninsula'},
    # {'q': 'Enderby Land'},
    # {'q': 'Dronning Maud Land'},
    # {'q': 'East Antarctica'},
    # {'q': 'North Victoria Land'},
    # {'q': 'South Victoria Land'},
    # {'q': 'Transantarctic Mountains'},
    # {'q': 'Ellsworth Mountains'},
    # {'q': 'Marie Byrd Land'},
    # {'q': 'Adelie Land'},
    # {'q': 'Ellsworth Land'},
    # {'q': 'South Antarctic Peninsula'},
]

MAX_OCCURRENCE_COUNT_PERMITTED = 10000000

# base url for terms resource
TDWG_RESOURCE = 'http://rs.tdwg.org/dwc/terms/'

GBIF_RESOURCE = 'http://rs.gbif.org/terms/1.0/'

PURL_BASE = 'http://purl.org/dc/terms/'

GBIF_API_BASE = 'https://api.gbif.org/v1/'

EML_RESOURCE = 'https://eml.ecoinformatics.org/'

OCCURRENCE_FIELDS = [
    'id', 'license', 'rightsHolder', 'accessRights', 'bibliographicCitation', 'references', 'institutionCode',
    'collectionCode', 'datasetName', 'dynamicProperties', 'recordedBy', 'individualCount', 'organismQuantity',
    'organismQuantityType', 'sex', 'lifeStage', 'occurrenceStatus', 'reproductiveCondition', 'behavior',
    'occurrenceRemarks', 'eventDate', 'eventTime', 'year', 'month', 'day', 'verbatimEventDate', 'samplingProtocol',
    'sampleSizeValue', 'sampleSizeUnit', 'samplingEffort', 'fieldNotes', 'locality', 'verbatimLocality', 'depth',
    'verbatimDepth', 'minimumDistanceAboveSurfaceInMeters', 'maximumDistanceAboveSurfaceInMeters',
    'locationAccordingTo', 'locationRemarks', 'decimalLatitude',
    'decimalLongitude', 'geodeticDatum', 'coordinateUncertaintyInMeters', 'coordinatePrecision', 'scientificName',
    'taxonKey', 'kingdom', 'phylum', '_class', 'order', 'family', 'genus', 'subgenus', 'specificEpithet',
    'infraspecificEpithet', 'taxonRank', 'scientificNameAuthorship', 'basisOfRecord', 'datasetKey', 'dataset_id']

SWAGGER_SETTINGS = {
    'DEFAULT_API_URL': 'https://data.biodiversity.aq/'
}
